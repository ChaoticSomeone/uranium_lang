# This file is generated dynamically during installation, thus no quality assurance can be made
# !! Please leave this file unchanged !!
from src.lexer.tokens import Token, TokenGroup, TokenTemplate
u_token_group_datatypes = TokenGroup([TokenTemplate(pattern=r'int', cpp_translate='int', name='Int', _id='int'),TokenTemplate(pattern=r'float', cpp_translate='float', name='Float', _id='float'),TokenTemplate(pattern=r'string', cpp_translate='std::string', name='String', _id='string'),TokenTemplate(pattern=r'bool', cpp_translate='bool', name='Bool', _id='bool')], g_name = 'Datatypes', g_id = 'datatypes')
u_token_group_externals = TokenGroup([TokenTemplate(pattern=r'', cpp_translate='void', name='Void', _id='void'),TokenTemplate(pattern=r'', cpp_translate='', name='Expression', _id='ex_expr'),TokenTemplate(pattern=r'', cpp_translate=';', name='Semicolon', _id='semicolon')], g_name = 'Externals', g_id = 'externals')
u_token_group_keywords = TokenGroup([TokenTemplate(pattern=r'func', cpp_translate='', name='Function', _id='func'),TokenTemplate(pattern=r'return', cpp_translate='return', name='Return', _id='return'),TokenTemplate(pattern=r'import', cpp_translate='#include', name='Import', _id='import'),TokenTemplate(pattern=r'if', cpp_translate='if', name='If', _id='if'),TokenTemplate(pattern=r'else if', cpp_translate='else if', name='Else If', _id='else_if'),TokenTemplate(pattern=r'else', cpp_translate='else', name='Else', _id='else'),TokenTemplate(pattern=r'while', cpp_translate='while', name='While', _id='while'),TokenTemplate(pattern=r'for', cpp_translate='for', name='For', _id='for'),TokenTemplate(pattern=r'true', cpp_translate='true', name='True', _id='true'),TokenTemplate(pattern=r'false', cpp_translate='false', name='False', _id='false')], g_name = 'Keywords', g_id = 'keywords')
u_token_group_misc = TokenGroup([TokenTemplate(pattern=r'\n', cpp_translate='', name='Newline', _id='newline'),TokenTemplate(pattern=r'uranium', cpp_translate='', name='uranium std', _id='std_uranium')], g_name = 'Misc', g_id = 'misc')
u_token_group_symbols = TokenGroup([TokenTemplate(pattern=r'<', cpp_translate='<', name='Left Angle', _id='l_angle'),TokenTemplate(pattern=r'>', cpp_translate='>', name='Right Angle', _id='r_angle'),TokenTemplate(pattern=r'==', cpp_translate='==', name='Equals (==)', _id='cmp_equals'),TokenTemplate(pattern=r'<=', cpp_translate='<=', name='Less Equals', _id='cmp_less_equals'),TokenTemplate(pattern=r'>=', cpp_translate='>=', name='Greater Equals', _id='cmp_greater_equals'),TokenTemplate(pattern=r'!=', cpp_translate='!=', name='Not Equals', _id='cmp_not_equals'),TokenTemplate(pattern=r'\(', cpp_translate='(', name='(', _id='l_paren'),TokenTemplate(pattern=r'\)', cpp_translate=')', name=')', _id='r_paren'),TokenTemplate(pattern=r'\{', cpp_translate='{', name='{', _id='l_curly'),TokenTemplate(pattern=r'\}', cpp_translate='}', name='}', _id='r_curly'),TokenTemplate(pattern=r'::', cpp_translate='/', name='Namespace Delimiter', _id='namespace_delimiter'),TokenTemplate(pattern=r',', cpp_translate=',', name='Comma', _id='comma'),TokenTemplate(pattern=r'\.', cpp_translate='::', name='Dot', _id='dot'),TokenTemplate(pattern=r'!', cpp_translate='!', name='Exclamation Mark', _id='exclamation'),TokenTemplate(pattern=r'->', cpp_translate='', name='Return Type', _id='ret_type'),TokenTemplate(pattern=r':', cpp_translate='', name='Type Delimiter', _id='type'),TokenTemplate(pattern=r'\+', cpp_translate='+', name='Plus', _id='plus'),TokenTemplate(pattern=r'-', cpp_translate='-', name='Minus', _id='minus'),TokenTemplate(pattern=r'\*', cpp_translate='*', name='Asterisk', _id='asterisk'),TokenTemplate(pattern=r'/', cpp_translate='/', name='Slash', _id='slash'),TokenTemplate(pattern=r'%', cpp_translate='%', name='Percent', _id='percent'),TokenTemplate(pattern=r'=', cpp_translate='=', name='Equals (=)', _id='equals')], g_name = 'Symbols', g_id = 'symbols')
u_token_group_literals = TokenGroup([TokenTemplate(pattern=r'\d*\.\d+', cpp_translate='', name='Float Literal', _id='lit_float'),TokenTemplate(pattern=r'\d+', cpp_translate='', name='Int Literal', _id='lit_int'),TokenTemplate(pattern=r'\".*\"', cpp_translate='', name='String Literal', _id='lit_string')], g_name = 'Literals', g_id = 'literals')
u_token_group_identifiers_g = TokenGroup([TokenTemplate(pattern=r'[a-zA-Z_]\w*', cpp_translate='', name='Identifier', _id='identifiers'),TokenTemplate(pattern=r'', cpp_translate='', name='Uranium STD Identifier', _id='std_identifier')], g_name = 'Identifiers', g_id = 'identifiers_g')
token_group_all = u_token_group_datatypes + u_token_group_externals + u_token_group_keywords + u_token_group_misc + u_token_group_symbols + u_token_group_literals + u_token_group_identifiers_g 
token_group_all.name = 'All'
token_group_all.id = 'all'
